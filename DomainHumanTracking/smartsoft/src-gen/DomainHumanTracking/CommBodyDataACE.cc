//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#include "DomainHumanTracking/CommBodyDataACE.hh"
#include <ace/SString.h>
#include "CommBasicObjects/CommTimeStampACE.hh"
#include "DomainHumanTracking/CommJointDataACE.hh"
#include "DomainHumanTracking/enumHandTrackingStateTypeData.hh"

// serialization operator for element CommBodyData
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const DomainHumanTrackingIDL::CommBodyData &data)
{
	ACE_CDR::Boolean good_bit = true;
	// serialize list-element isTracked
	good_bit = good_bit && cdr.write_boolean(data.isTracked);
	// serialize list-element acquisitionTime
	good_bit = good_bit && cdr << data.acquisitionTime;
	// serialize list-element leftHandState
	good_bit = good_bit && cdr.write_long(data.leftHandState);
	// serialize list-element rightHandState
	good_bit = good_bit && cdr.write_long(data.rightHandState);
	// serialize list-element jointData
	good_bit = good_bit && cdr << ACE_Utils::truncate_cast<ACE_CDR::ULong>(data.jointData.size());
	std::vector<DomainHumanTrackingIDL::CommJointData>::const_iterator data_jointDataIt;
	for(data_jointDataIt=data.jointData.begin(); data_jointDataIt!=data.jointData.end(); data_jointDataIt++) {
		good_bit = good_bit && cdr << *data_jointDataIt;
	}
	
	return good_bit;
}

// de-serialization operator for element CommBodyData
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, DomainHumanTrackingIDL::CommBodyData &data)
{
	ACE_CDR::Boolean good_bit = true;
	// deserialize type element isTracked
	good_bit = good_bit && cdr.read_boolean(data.isTracked);
	// deserialize type element acquisitionTime
	good_bit = good_bit && cdr >> data.acquisitionTime;
	// deserialize type element leftHandState
	good_bit = good_bit && cdr.read_long(data.leftHandState);
	// deserialize type element rightHandState
	good_bit = good_bit && cdr.read_long(data.rightHandState);
	// deserialize list-type element jointData
	ACE_CDR::ULong data_jointDataNbr;
	good_bit = good_bit && cdr >> data_jointDataNbr;
	data.jointData.clear();
	DomainHumanTrackingIDL::CommJointData data_jointDataItem;
	for(ACE_CDR::ULong i=0; i<data_jointDataNbr; ++i) {
		good_bit = good_bit && cdr >> data_jointDataItem;
		data.jointData.push_back(data_jointDataItem);
	}
	
	return good_bit;
}

// serialization operator for CommunicationObject CommBodyData
ACE_CDR::Boolean operator<<(ACE_OutputCDR &cdr, const DomainHumanTracking::CommBodyData &obj)
{
	return cdr << obj.get();
}

// de-serialization operator for CommunicationObject CommBodyData
ACE_CDR::Boolean operator>>(ACE_InputCDR &cdr, DomainHumanTracking::CommBodyData &obj)
{
	return cdr >> obj.set();
}
