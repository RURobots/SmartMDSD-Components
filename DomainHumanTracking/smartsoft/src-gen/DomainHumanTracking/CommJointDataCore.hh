//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef DOMAINHUMANTRACKING_COMMJOINTDATA_CORE_H_
#define DOMAINHUMANTRACKING_COMMJOINTDATA_CORE_H_

#include "DomainHumanTracking/CommJointDataData.hh"
#include "DomainHumanTracking/Comm3dVector.hh"
#include "DomainHumanTracking/Comm2dVector.hh"
#include "DomainHumanTracking/enumJointTrackingStateType.hh"

#include <iostream>
#include <string>
#include <list>

namespace DomainHumanTracking {
	
class CommJointDataCore {
protected:
	// data structure
	DomainHumanTrackingIDL::CommJointData idl_CommJointData;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef DomainHumanTrackingIDL::CommJointData DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommJointDataCore();
	CommJointDataCore(const DATATYPE &data);
	// default destructor
	virtual ~CommJointDataCore();
	
	const DATATYPE& get() const { return idl_CommJointData; }
	operator const DATATYPE&() const { return idl_CommJointData; }
	DATATYPE& set() { return idl_CommJointData; }

	static inline std::string identifier(void) { return "DomainHumanTracking::CommJointData"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element IsJointTracked
	inline DomainHumanTracking::JointTrackingStateType getIsJointTracked() const { return DomainHumanTracking::JointTrackingStateType(idl_CommJointData.isJointTracked); }
	inline CommJointDataCore& setIsJointTracked(const DomainHumanTracking::JointTrackingStateType &isJointTracked) { idl_CommJointData.isJointTracked = isJointTracked; return *this; }
	
	// getter and setter for element JointPosition2D
	inline DomainHumanTracking::Comm2dVector getJointPosition2D() const { return DomainHumanTracking::Comm2dVector(idl_CommJointData.jointPosition2D); }
	inline CommJointDataCore& setJointPosition2D(const DomainHumanTracking::Comm2dVector &jointPosition2D) { idl_CommJointData.jointPosition2D = jointPosition2D; return *this; }
	
	// getter and setter for element JointVelocity2D
	inline DomainHumanTracking::Comm2dVector getJointVelocity2D() const { return DomainHumanTracking::Comm2dVector(idl_CommJointData.jointVelocity2D); }
	inline CommJointDataCore& setJointVelocity2D(const DomainHumanTracking::Comm2dVector &jointVelocity2D) { idl_CommJointData.jointVelocity2D = jointVelocity2D; return *this; }
	
	// getter and setter for element JointPosition3d
	inline DomainHumanTracking::Comm3dVector getJointPosition3d() const { return DomainHumanTracking::Comm3dVector(idl_CommJointData.jointPosition3d); }
	inline CommJointDataCore& setJointPosition3d(const DomainHumanTracking::Comm3dVector &jointPosition3d) { idl_CommJointData.jointPosition3d = jointPosition3d; return *this; }
	
	// getter and setter for element JointVelocity3d
	inline DomainHumanTracking::Comm3dVector getJointVelocity3d() const { return DomainHumanTracking::Comm3dVector(idl_CommJointData.jointVelocity3d); }
	inline CommJointDataCore& setJointVelocity3d(const DomainHumanTracking::Comm3dVector &jointVelocity3d) { idl_CommJointData.jointVelocity3d = jointVelocity3d; return *this; }
};

} /* namespace DomainHumanTracking */
#endif /* DOMAINHUMANTRACKING_COMMJOINTDATA_CORE_H_ */
