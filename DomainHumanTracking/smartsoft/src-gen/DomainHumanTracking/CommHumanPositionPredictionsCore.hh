//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef DOMAINHUMANTRACKING_COMMHUMANPOSITIONPREDICTIONS_CORE_H_
#define DOMAINHUMANTRACKING_COMMHUMANPOSITIONPREDICTIONS_CORE_H_

#include "DomainHumanTracking/CommHumanPositionPredictionsData.hh"
#include "DomainHumanTracking/CommPredictedData.hh"

#include <iostream>
#include <string>
#include <list>

namespace DomainHumanTracking {
	
class CommHumanPositionPredictionsCore {
protected:
	// data structure
	DomainHumanTrackingIDL::CommHumanPositionPredictions idl_CommHumanPositionPredictions;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef DomainHumanTrackingIDL::CommHumanPositionPredictions DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommHumanPositionPredictionsCore();
	CommHumanPositionPredictionsCore(const DATATYPE &data);
	// default destructor
	virtual ~CommHumanPositionPredictionsCore();
	
	const DATATYPE& get() const { return idl_CommHumanPositionPredictions; }
	operator const DATATYPE&() const { return idl_CommHumanPositionPredictions; }
	DATATYPE& set() { return idl_CommHumanPositionPredictions; }

	static inline std::string identifier(void) { return "DomainHumanTracking::CommHumanPositionPredictions"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element PredictedData
	/**
	 * Getter methods for element idl_CommHumanPositionPredictions.predictedData of type vector<DomainHumanTracking::CommPredictedData>
	 */
	inline std::vector<DomainHumanTracking::CommPredictedData> getPredictedDataCopy() const { 
		return std::vector<DomainHumanTracking::CommPredictedData>(idl_CommHumanPositionPredictions.predictedData.begin(), idl_CommHumanPositionPredictions.predictedData.end());
	}
	inline DomainHumanTracking::CommPredictedData getPredictedDataElemAtPos(const size_t &pos) const {
		return DomainHumanTracking::CommPredictedData(idl_CommHumanPositionPredictions.predictedData[pos]);
	}
	inline size_t getPredictedDataSize() const { return idl_CommHumanPositionPredictions.predictedData.size(); }
	inline bool isPredictedDataEmpty() const { return idl_CommHumanPositionPredictions.predictedData.empty(); }
	/**
	 * Setter methods for idl_CommHumanPositionPredictions.predictedData of type vector<DomainHumanTracking::CommPredictedData>
	 */
	inline CommHumanPositionPredictionsCore& setPredictedData(const std::vector<DomainHumanTracking::CommPredictedData> &predictedData) { 
		idl_CommHumanPositionPredictions.predictedData.assign(predictedData.begin(), predictedData.end());
		return *this;
	}
	inline bool setPredictedDataElemAtPos(const size_t &pos, const DomainHumanTracking::CommPredictedData &elem) {
		if(pos < idl_CommHumanPositionPredictions.predictedData.size()) {
			idl_CommHumanPositionPredictions.predictedData[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertPredictedDataVectorAtPos(const size_t &pos, const std::vector<DomainHumanTracking::CommPredictedData> &data) {
		if(pos < idl_CommHumanPositionPredictions.predictedData.size()) {
			idl_CommHumanPositionPredictions.predictedData.insert(idl_CommHumanPositionPredictions.predictedData.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizePredictedData(const size_t &size) { idl_CommHumanPositionPredictions.predictedData.resize(size); }
	inline bool erasePredictedDataElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommHumanPositionPredictions.predictedData.size() ) {
			idl_CommHumanPositionPredictions.predictedData.erase(idl_CommHumanPositionPredictions.predictedData.begin()+pos, idl_CommHumanPositionPredictions.predictedData.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearPredictedData() { idl_CommHumanPositionPredictions.predictedData.clear(); }
};

} /* namespace DomainHumanTracking */
#endif /* DOMAINHUMANTRACKING_COMMHUMANPOSITIONPREDICTIONS_CORE_H_ */
