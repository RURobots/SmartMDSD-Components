//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef DOMAINHUMANTRACKING_COMMBODYDATA_CORE_H_
#define DOMAINHUMANTRACKING_COMMBODYDATA_CORE_H_

#include "DomainHumanTracking/CommBodyDataData.hh"
#include "CommBasicObjects/CommTimeStamp.hh"
#include "DomainHumanTracking/CommJointData.hh"
#include "DomainHumanTracking/enumHandTrackingStateType.hh"

#include <iostream>
#include <string>
#include <list>

namespace DomainHumanTracking {
	
class CommBodyDataCore {
protected:
	// data structure
	DomainHumanTrackingIDL::CommBodyData idl_CommBodyData;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef DomainHumanTrackingIDL::CommBodyData DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommBodyDataCore();
	CommBodyDataCore(const DATATYPE &data);
	// default destructor
	virtual ~CommBodyDataCore();
	
	const DATATYPE& get() const { return idl_CommBodyData; }
	operator const DATATYPE&() const { return idl_CommBodyData; }
	DATATYPE& set() { return idl_CommBodyData; }

	static inline std::string identifier(void) { return "DomainHumanTracking::CommBodyData"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element IsTracked
	inline bool getIsTracked() const { return idl_CommBodyData.isTracked; }
	inline CommBodyDataCore& setIsTracked(const bool &isTracked) { idl_CommBodyData.isTracked = isTracked; return *this; }
	
	// getter and setter for element AcquisitionTime
	inline CommBasicObjects::CommTimeStamp getAcquisitionTime() const { return CommBasicObjects::CommTimeStamp(idl_CommBodyData.acquisitionTime); }
	inline CommBodyDataCore& setAcquisitionTime(const CommBasicObjects::CommTimeStamp &acquisitionTime) { idl_CommBodyData.acquisitionTime = acquisitionTime; return *this; }
	
	// getter and setter for element LeftHandState
	inline DomainHumanTracking::HandTrackingStateType getLeftHandState() const { return DomainHumanTracking::HandTrackingStateType(idl_CommBodyData.leftHandState); }
	inline CommBodyDataCore& setLeftHandState(const DomainHumanTracking::HandTrackingStateType &leftHandState) { idl_CommBodyData.leftHandState = leftHandState; return *this; }
	
	// getter and setter for element RightHandState
	inline DomainHumanTracking::HandTrackingStateType getRightHandState() const { return DomainHumanTracking::HandTrackingStateType(idl_CommBodyData.rightHandState); }
	inline CommBodyDataCore& setRightHandState(const DomainHumanTracking::HandTrackingStateType &rightHandState) { idl_CommBodyData.rightHandState = rightHandState; return *this; }
	
	// getter and setter for element JointData
	/**
	 * Getter methods for element idl_CommBodyData.jointData of type vector<DomainHumanTracking::CommJointData>
	 */
	inline std::vector<DomainHumanTracking::CommJointData> getJointDataCopy() const { 
		return std::vector<DomainHumanTracking::CommJointData>(idl_CommBodyData.jointData.begin(), idl_CommBodyData.jointData.end());
	}
	inline DomainHumanTracking::CommJointData getJointDataElemAtPos(const size_t &pos) const {
		return DomainHumanTracking::CommJointData(idl_CommBodyData.jointData[pos]);
	}
	inline size_t getJointDataSize() const { return idl_CommBodyData.jointData.size(); }
	inline bool isJointDataEmpty() const { return idl_CommBodyData.jointData.empty(); }
	/**
	 * Setter methods for idl_CommBodyData.jointData of type vector<DomainHumanTracking::CommJointData>
	 */
	inline CommBodyDataCore& setJointData(const std::vector<DomainHumanTracking::CommJointData> &jointData) { 
		idl_CommBodyData.jointData.assign(jointData.begin(), jointData.end());
		return *this;
	}
	inline bool setJointDataElemAtPos(const size_t &pos, const DomainHumanTracking::CommJointData &elem) {
		if(pos < idl_CommBodyData.jointData.size()) {
			idl_CommBodyData.jointData[pos] = elem;
			return true;
		}
		return false;
	}
	inline bool insertJointDataVectorAtPos(const size_t &pos, const std::vector<DomainHumanTracking::CommJointData> &data) {
		if(pos < idl_CommBodyData.jointData.size()) {
			idl_CommBodyData.jointData.insert(idl_CommBodyData.jointData.begin()+pos, data.begin(), data.end());
			return true;
		}
		return false;
	}
	inline void resizeJointData(const size_t &size) { idl_CommBodyData.jointData.resize(size); }
	inline bool eraseJointDataElemsAtPos(const size_t &pos, const size_t &nbr_elems) {
		if( (pos+nbr_elems) <= idl_CommBodyData.jointData.size() ) {
			idl_CommBodyData.jointData.erase(idl_CommBodyData.jointData.begin()+pos, idl_CommBodyData.jointData.begin()+pos+nbr_elems);
			return true;
		}
		return false;
	}
	inline void clearJointData() { idl_CommBodyData.jointData.clear(); }
};

} /* namespace DomainHumanTracking */
#endif /* DOMAINHUMANTRACKING_COMMBODYDATA_CORE_H_ */
