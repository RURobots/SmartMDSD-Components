//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef DOMAINHUMANTRACKING_COMMPREDICTEDDATA_CORE_H_
#define DOMAINHUMANTRACKING_COMMPREDICTEDDATA_CORE_H_

#include "DomainHumanTracking/CommPredictedDataData.hh"

#include <iostream>
#include <string>
#include <list>

namespace DomainHumanTracking {
	
class CommPredictedDataCore {
protected:
	// data structure
	DomainHumanTrackingIDL::CommPredictedData idl_CommPredictedData;
	
public:
	// give a publicly accessible type-name for the template parameter IDL
	typedef DomainHumanTrackingIDL::CommPredictedData DATATYPE;
	
	#ifdef ENABLE_HASH
		static size_t generateDataHash(const DATATYPE &);
	#endif
	
	static const char* getCompiledHash();
	static void getAllHashValues(std::list<std::string> &hashes);
	static void checkAllHashValues(std::list<std::string> &hashes);
	
	// default constructors
	CommPredictedDataCore();
	CommPredictedDataCore(const DATATYPE &data);
	// default destructor
	virtual ~CommPredictedDataCore();
	
	const DATATYPE& get() const { return idl_CommPredictedData; }
	operator const DATATYPE&() const { return idl_CommPredictedData; }
	DATATYPE& set() { return idl_CommPredictedData; }

	static inline std::string identifier(void) { return "DomainHumanTracking::CommPredictedData"; }
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const;
	
	// convert to xml stream
	void to_xml(std::ostream &os, const std::string &indent = "") const;
	
	// restore from xml stream
	void from_xml(std::istream &is);
	
	// User Interface
	
	// getter and setter for element Valid
	inline bool getValid() const { return idl_CommPredictedData.valid; }
	inline CommPredictedDataCore& setValid(const bool &valid) { idl_CommPredictedData.valid = valid; return *this; }
	
	// getter and setter for element XMaxLimit
	inline double getXMaxLimit() const { return idl_CommPredictedData.xMaxLimit; }
	inline CommPredictedDataCore& setXMaxLimit(const double &xMaxLimit) { idl_CommPredictedData.xMaxLimit = xMaxLimit; return *this; }
	
	// getter and setter for element XMinLimit
	inline double getXMinLimit() const { return idl_CommPredictedData.xMinLimit; }
	inline CommPredictedDataCore& setXMinLimit(const double &xMinLimit) { idl_CommPredictedData.xMinLimit = xMinLimit; return *this; }
	
	// getter and setter for element YMaxLimit
	inline double getYMaxLimit() const { return idl_CommPredictedData.yMaxLimit; }
	inline CommPredictedDataCore& setYMaxLimit(const double &yMaxLimit) { idl_CommPredictedData.yMaxLimit = yMaxLimit; return *this; }
	
	// getter and setter for element YMinLimit
	inline double getYMinLimit() const { return idl_CommPredictedData.yMinLimit; }
	inline CommPredictedDataCore& setYMinLimit(const double &yMinLimit) { idl_CommPredictedData.yMinLimit = yMinLimit; return *this; }
	
	// getter and setter for element ZMaxLimit
	inline double getZMaxLimit() const { return idl_CommPredictedData.zMaxLimit; }
	inline CommPredictedDataCore& setZMaxLimit(const double &zMaxLimit) { idl_CommPredictedData.zMaxLimit = zMaxLimit; return *this; }
	
	// getter and setter for element ZMinLimit
	inline double getZMinLimit() const { return idl_CommPredictedData.zMinLimit; }
	inline CommPredictedDataCore& setZMinLimit(const double &zMinLimit) { idl_CommPredictedData.zMinLimit = zMinLimit; return *this; }
};

} /* namespace DomainHumanTracking */
#endif /* DOMAINHUMANTRACKING_COMMPREDICTEDDATA_CORE_H_ */
