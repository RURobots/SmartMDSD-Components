//--------------------------------------------------------------------------
// Code generated by the SmartSoft MDSD Toolchain
// The SmartSoft Toolchain has been developed by:
//  
// Service Robotics Research Center
// University of Applied Sciences Ulm
// Prittwitzstr. 10
// 89075 Ulm (Germany)
//
// Information about the SmartSoft MDSD Toolchain is available at:
// www.servicerobotik-ulm.de
//
// Please do not modify this file. It will be re-generated
// running the code generator.
//--------------------------------------------------------------------------
#ifndef _PARAMETERSTATESTRUCTCORE_HH
#define _PARAMETERSTATESTRUCTCORE_HH

#include "aceSmartSoft.hh"

#include <iostream>

// forward declaration (in order to define validateCOMMIT(ParameterStateStruct) which is implemented in derived class)
class ParameterStateStruct;

class ParameterStateStructCore
{
	friend class ParamUpdateHandler;
public:
	
		///////////////////////////////////////////
		// Internal params
		///////////////////////////////////////////
		
		/**
		 * Definition of Parameter settings
		 */
		class settingsType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			bool debug_info;
			bool display_images;
		
		public:
			// default constructor
			settingsType() {
				debug_info = true;
				display_images = true;
			}
		
			/**
			 * here are the public getters
			 */
			inline bool getDebug_info() const { return debug_info; }
			inline bool getDisplay_images() const { return display_images; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "settings(";
				os << "debug_info = " << debug_info << ", ";
				os << "display_images = " << display_images << ", ";
				os << ")\n";
			}
			
		}; // end class settingsType
		
		/**
		 * Definition of Parameter config
		 */
		class configType 
		{
			friend class ParamUpdateHandler;
		protected:
			/**
			 * here are the member definitions
			 */
			unsigned char depth_region_size;
			unsigned char maximum_bodies;
			float maximum_distance;
			float maximum_velocity;
			float minimum_distance;
			std::string model_folder;
			float score_threshold;
		
		public:
			// default constructor
			configType() {
				depth_region_size = 5;
				maximum_bodies = 1;
				maximum_distance = 10.0;
				maximum_velocity = 3.0;
				minimum_distance = 0.01;
				model_folder = "";
				score_threshold = 0.1;
			}
		
			/**
			 * here are the public getters
			 */
			inline unsigned char getDepth_region_size() const { return depth_region_size; }
			inline unsigned char getMaximum_bodies() const { return maximum_bodies; }
			inline float getMaximum_distance() const { return maximum_distance; }
			inline float getMaximum_velocity() const { return maximum_velocity; }
			inline float getMinimum_distance() const { return minimum_distance; }
			inline std::string getModel_folder() const { return model_folder; }
			inline float getScore_threshold() const { return score_threshold; }
			
			void to_ostream(std::ostream &os = std::cout) const
			{
				os << "config(";
				os << "depth_region_size = " << depth_region_size << ", ";
				os << "maximum_bodies = " << maximum_bodies << ", ";
				os << "maximum_distance = " << maximum_distance << ", ";
				os << "maximum_velocity = " << maximum_velocity << ", ";
				os << "minimum_distance = " << minimum_distance << ", ";
				os << "model_folder = " << model_folder << ", ";
				os << "score_threshold = " << score_threshold << ", ";
				os << ")\n";
			}
			
		}; // end class configType
		
	
		///////////////////////////////////////////
		// External params
		///////////////////////////////////////////
		
	
		///////////////////////////////////////////
		// Instance params
		///////////////////////////////////////////
		
	
protected:

	// Internal params
	configType config;
	settingsType settings;
	
	// External params
	
	// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
	

	void setContent(const ParameterStateStructCore &commit) {
		// External params
	
	}

	// special trigger method (user upcall) called before updating parameter global state
	virtual SmartACE::ParamResponseType handleCOMMIT(const ParameterStateStruct &commitState) = 0;
public:
	ParameterStateStructCore() {  }
	virtual ~ParameterStateStructCore() {  }
	
	// internal param getters
	configType getConfig() const {
		return config;
	}
	settingsType getSettings() const {
		return settings;
	}
	
	// external param getters
	
	// repo wrapper class getter(s)
	
	// helper method to easily implement output stream in derived classes
	void to_ostream(std::ostream &os = std::cout) const
	{
		// Internal params
		config.to_ostream(os);
		settings.to_ostream(os);
		
		// External params
		
		// Instance params (encapsulated in a wrapper class for each instantiated parameter repository)
	}
};

#endif
